package com.example.CafeGoogooExample;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/role") // This means URL's start with /demo (after Application path)
public class LoginController {


    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    private SpringSecurityConfig springSecurityConfig;

    public static final Logger LOG = LoggerFactory.getLogger(LoginController.class);

//    //ADD
//    @CrossOrigin(origins = "http://localhost:8081")
//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody ResponseEntity<User> findUser (@RequestParam String name
//            , @RequestParam String email , @RequestParam String phone) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        LOG.info("Name: {}, Email: {}", name, email);
//        User user = new User();
//        user.setUsername(name);
//        user.setEmail(email);
//        user.setPhone(phone);
//        userRepository.save(user);
//        return ResponseEntity.ok(user);
//    }

    //POST
    @CrossOrigin(origins = "http://localhost:8081")
    @GetMapping
    public @ResponseBody String findUser(@RequestParam String username, @RequestParam String password) {
        final Optional<User> user = userRepository.findByUsername(username);
        //LOG.info("PWMatches: {} PRESENT: {}",BCrypt.checkpw(password,user.get().getPassword()), user.isPresent());
        if (user.isPresent() && BCrypt.checkpw(password,user.get().getPassword())) {
            LOG.info("Username: {}, Password: {}", username, user.get().getPassword());
            LOG.info("Role: {}", user.get().getRole());
            return user.get().getRole() +","+ String.valueOf(user.get().getId());
        }else {
            return "anon";
        }

//            if(user.get().getRole() == "ROLE_USER") {
//                return "user";
//            } else if(user.get().getRole() == "ROLE_ADMIN") {
//                return "admin";
//            }

        //}
        //return "noPassMatch";


    }

}
