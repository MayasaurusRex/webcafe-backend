package com.example.CafeGoogooExample;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.view.RedirectView;

import javax.transaction.Transactional;
import java.util.Optional;


@Controller // This means that this class is a Controller
@RequestMapping(path="/option") // This means URL's start with /demo (after Application path)
public class MenuOpController {

    public static final Logger LOG = LoggerFactory.getLogger(MenuOpController.class);

    @Autowired // This means to get the bean called optionRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MenuOpRepository menuOpRepository;
    @Autowired
    private MenuRepository menuRepository;

    //ADD
    @CrossOrigin(origins = "http://localhost:8081")
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<MenuOp> addNewOption (@RequestParam String menuid , @RequestParam String name
            , @RequestParam String price) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
            Integer m = Integer.valueOf(menuid);
            if( menuRepository.existsById(m)) {
                LOG.info("Name: {}, Price: {}", name, price);
                MenuOp menuOp = new MenuOp();
                menuOp.setMenuid(menuid);
                menuOp.setName(name);
                menuOp.setPrice(price);
                menuOpRepository.save(menuOp);
                return ResponseEntity.ok(menuOp);
            }else{
                return (ResponseEntity<MenuOp>) ResponseEntity.badRequest();
            }
    }

    //GET
    @CrossOrigin(origins = "http://localhost:8081")
    @GetMapping(path="/all")
    public @ResponseBody ResponseEntity<Iterable<MenuOp>> getOptions() {
        // This returns a JSON or XML with the menu items
        return ResponseEntity.ok(menuOpRepository.findAll());
    }

    //DELETE
    @CrossOrigin(origins = "http://localhost:8081")
    @DeleteMapping(path="/{id}")
    public @ResponseBody ResponseEntity<?> deleteOption(@PathVariable("id") Integer id) {
        // This returns a JSON or XML with the menu items
        final Optional<MenuOp> menuOp = menuOpRepository.findById(id);
        if (!menuOp.isPresent()) {
            return ResponseEntity.notFound().build();
        }
        menuOpRepository.delete(menuOp.get());
        return ResponseEntity.ok().build();
    }

    //UPDATE
    @CrossOrigin(origins = "http://localhost:8081" )
    @PutMapping(path = "/{id}")
    @Transactional
    public @ResponseBody ResponseEntity<MenuOp> updateOption(@RequestBody MenuOp menuOp, @PathVariable("id") Integer id) {

        if (!menuOpRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        menuOp.setId(id);
        menuOpRepository.save(menuOp);
        return ResponseEntity.ok().build();
    }


}

