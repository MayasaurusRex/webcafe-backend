package com.example.CafeGoogooExample;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import javax.persistence.Id;


import javax.transaction.Transactional;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/menu") // This means URL's start with /demo (after Application path)
public class MenuController {

    public static final Logger LOG = LoggerFactory.getLogger(MenuController.class);

    @Autowired // This means to get the bean called menuRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MenuRepository menuRepository;

    @Autowired
    private MenuOpRepository menuOpRepository;

    //ADD
    @CrossOrigin(origins = "http://localhost:8081")
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<Menu> addNewMenu (@RequestParam String name
            , @RequestParam String price) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        LOG.info("Name: {}, Price: {}", name, price);
        Menu menu = new Menu();
        menu.setName(name);
        menu.setPrice(price);
        menuRepository.save(menu);
        return ResponseEntity.ok(menu);
    }

    //GET
    @CrossOrigin(origins = "http://localhost:8081")
    @GetMapping(path="/all")
    public @ResponseBody ResponseEntity<Iterable<Menu>> getMenu() {
        // This returns a JSON or XML with the menu items
        return ResponseEntity.ok(menuRepository.findAll());
    }

    public @ResponseBody Boolean menuIdExists(Integer menuid){
        Iterable<Menu> m = menuRepository.findAll();
        for (Menu item:
             m) {
            if (item.getId() == menuid) {
                return true;
            }
        }
        return false;
    }


    //DELETE
    @CrossOrigin(origins = "http://localhost:8081")
    @DeleteMapping(path="/{id}")
    @Transactional
    public @ResponseBody ResponseEntity<?> deleteItem(@PathVariable("id") Integer id) {
        // This returns a JSON or XML with the menu items
        final Optional<Menu> menu = menuRepository.findById(id);
        if (!menu.isPresent()) {
            return ResponseEntity.notFound().build();
        }
        menuOpRepository.deleteByMenuid(String.valueOf(menu.get().getId()));
        menuRepository.delete(menu.get());


        return ResponseEntity.ok().build();
    }

    //UPDATE
    @CrossOrigin(origins = "http://localhost:8081" )
    @PutMapping(path = "/{id}")
    @Transactional
    public @ResponseBody ResponseEntity<Menu> updateItem(@RequestBody Menu menu, @PathVariable("id") Integer id) {

        if (!menuRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        menu.setId(id);
        menuRepository.save(menu);
        return ResponseEntity.ok().build();
    }

}

